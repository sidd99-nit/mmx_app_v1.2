<!-- Loading Bar Container -->
<div class="container" id="loadingContainer" style="display: none;">
  <h2>Data Profiling</h2>
  <p class="status-text">Analyzing your data...</p>
  <div class="progress-container">
    <div class="progress-bar" id="progress-bar"></div>
    <div class="blur-layer" id="blur-layer"></div>
  </div>
  <p class="time-remaining">Estimated time: 2 minutes</p>
</div>

<!-- Custom Buttons Below the Cards -->
<div class="col-12" id="triggerModal" style="display: none; justify-content: space-between; margin-top: 35vh; margin-left: -20vh;">
  <!-- First Custom Button -->
  <div class="custom-button" id="openModal1" style="width: 49%;">Open Sales File Report</div> 

  <!-- Second Custom Button -->
  <div class="custom-button" id="openModal2" style="width: 50%;">Open Media File Report</div>
</div>

<script>
  let progress = 0;

  async function handleFiles(files_1, files_2) {
    if (files_1 && files_2) {  // Ensures both files are available
      const file_1 = files_1[0];
      const file_2 = files_2[0];

      const formData = new FormData();
      formData.append('file_1', file_1);  // Append the first file to the form data
      formData.append('file_2', file_2);  // Append the second file to the form data

      // Show the loading bar and hide the triggerModal div
      document.getElementById('loadingContainer').style.display = 'block';
      document.getElementById('triggerModal').style.display = 'none';

      // Reset progress before starting the upload
      progress = 0;
      const progressBar = document.getElementById('progress-bar');
      const blurLayer = document.getElementById('blur-layer');

      // Simulate loading progress while uploading
      const interval = setInterval(() => {
        const diff = Math.random() * 10;
        progress = Math.min(progress + diff, 100);
        progressBar.style.width = progress + '%';
        blurLayer.style.width = progress + '%';

        // Stop simulating and clear interval after reaching 100%
        if (progress >= 100) {
          clearInterval(interval);
        }
      }, 200);

      // Fetch API to send the files to the server for processing
      try {
        const response = await fetch('/upload', {
          method: 'POST',
          body: formData,
        });

        if (response.ok) {
          const result = await response.json();

          // Dynamically load the HTML content into the div for sales and media
          document.getElementById('html-content-sales').data = result.file_path_sales;
          document.getElementById('html-content-media').data = result.file_path_media;

          // Make the save and continue button visible
          document.getElementById('save-continue').style.display = 'block';

          // Hide loading bar and show triggerModal
          document.getElementById('loadingContainer').style.display = 'none';
          document.getElementById('triggerModal').style.display = 'flex';

        } else {
          const errorResponse = await response.json();
          alert(`Error uploading file: ${errorResponse.error}`);
        }
      } catch (error) {
        alert(`Error uploading file: ${error.message}`);
      }
    }
  }
</script>

<style>
  .progress-container {
    position: relative;
    height: 12px;
    background-color: #2d3748;
    border-radius: 6px;
    overflow: hidden;
    margin-bottom: 1rem;
  }

  .progress-bar {
    height: 100%;
    background: linear-gradient(to right, #14b8a6, #22d3ee, #3b82f6);
    transition: width 0.5s ease-out;
  }

  .blur-layer {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to right, #14b8a6, #22d3ee, #3b82f6);
    opacity: 0.5;
    filter: blur(10px);
  }
</style>
